{"version":3,"sources":["../../../src/rules/broken/index.js"],"names":["ruleName","messages","utils","ruleMessages","unexpected","imageURL","brokenRule","enabled","root","result","validOptions","validateOptions","actual","possible","list","checkIfImagesExists","then","results","reportBrokenImages","checkList","map","checkIfImageExists","Promise","all","listItem","url","catch","error","response","status","filter","resultItem","forEach","node","report","message"],"mappings":";;;;;;;;AAAA;;AACA;;AAEO,IAAMA,QAAQ,GAAG,sBAAU,QAAV,CAAjB;;;AACA,IAAMC,QAAQ,GAAGC,iBAAMC,YAAN,CAAmBH,QAAnB,EAA6B;AACnDI,EAAAA,UAAU,EAAE,oBAAAC,QAAQ;AAAA,WAAK,4BAA2BA,QAAS,GAAzC;AAAA;AAD+B,CAA7B,CAAjB;;;;AAIQ,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC1C,SAAO,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACvB,QAAMC,YAAY,GAAGR,iBAAMS,eAAN,CAAsBF,MAAtB,EAA8BT,QAA9B,EAAwC;AAC3DY,MAAAA,MAAM,EAAEL,OADmD;AAE3DM,MAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,KAAP;AAFiD,KAAxC,CAArB;;AAKA,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAMI,IAAI,GAAG,6CAAiCN,IAAjC,CAAb;AAEA,WAAOO,mBAAmB,CAACD,IAAD,EAAOL,MAAP,CAAnB,CACJO,IADI,CACC,UAAAC,OAAO;AAAA,aAAIC,kBAAkB,CAACD,OAAD,EAAUR,MAAV,CAAtB;AAAA,KADR,CAAP;AAED,GAdD;AAeD;;AAED,SAASM,mBAAT,CAA6BD,IAA7B,EAAmC;AACjC,MAAMK,SAAS,GAAGL,IAAI,CAACM,GAAL,CAASC,kBAAT,CAAlB;AAEA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,SAAZ,CAAP;AACD;;AAED,SAASE,kBAAT,CAA4BG,QAA5B,EAAsC;AACpC,SAAO,qBAASA,QAAQ,CAACC,GAAlB,EACJT,IADI,CACC,YAAM,CAAE,CADT,EAEJU,KAFI,CAEE,UAACC,KAAD,EAAW;AAChB,QAAIA,KAAK,IAAIA,KAAK,CAACC,QAAf,IAA2BD,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAAzD,EAA8D;AAC5D,aAAOL,QAAP;AACD;;AAED,WAAO,IAAP;AACD,GARI,CAAP;AASD;;AAED,SAASN,kBAAT,CAA4BD,OAA5B,EAAqCR,MAArC,EAA6C;AAC3CQ,EAAAA,OAAO,CACJa,MADH,CACU,UAAAC,UAAU;AAAA,WAAI,CAAC,CAACA,UAAN;AAAA,GADpB,EAEGC,OAFH,CAEW,gBAAmB;AAAA,QAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,QAAVR,GAAU,QAAVA,GAAU;;AAC1BvB,qBAAMgC,MAAN,CAAa;AAAEC,MAAAA,OAAO,EAAElC,QAAQ,CAACG,UAAT,CAAoBqB,GAApB,CAAX;AAAqCQ,MAAAA,IAArC;AAA2CxB,MAAAA,MAA3C;AAAmDT,MAAAA;AAAnD,KAAb;AACD,GAJH;AAKD","sourcesContent":["import { utils } from 'stylelint';\nimport { namespace, generateListOfImagesURLsAndNodes, getImage } from '../../utils';\n\nexport const ruleName = namespace('broken');\nexport const messages = utils.ruleMessages(ruleName, {\n  unexpected: imageURL => `Unexpected broken image \"${imageURL}\"`\n});\n\nexport default function brokenRule(enabled) {\n  return (root, result) => {\n    const validOptions = utils.validateOptions(result, ruleName, {\n      actual: enabled,\n      possible: [true, false]\n    });\n\n    if (!validOptions) {\n      return null;\n    }\n\n    const list = generateListOfImagesURLsAndNodes(root);\n\n    return checkIfImagesExists(list, result)\n      .then(results => reportBrokenImages(results, result));\n  };\n}\n\nfunction checkIfImagesExists(list) {\n  const checkList = list.map(checkIfImageExists);\n\n  return Promise.all(checkList);\n}\n\nfunction checkIfImageExists(listItem) {\n  return getImage(listItem.url)\n    .then(() => {})\n    .catch((error) => {\n      if (error && error.response && error.response.status === 404) {\n        return listItem;\n      }\n\n      return null;\n    });\n}\n\nfunction reportBrokenImages(results, result) {\n  results\n    .filter(resultItem => !!resultItem)\n    .forEach(({ node, url }) => {\n      utils.report({ message: messages.unexpected(url), node, result, ruleName });\n    });\n}\n"],"file":"index.js"}