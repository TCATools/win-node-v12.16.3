{"version":3,"sources":["../../../src/rules/prefer-data-uri/index.js"],"names":["ruleName","messages","utils","ruleMessages","expected","imageURL","ruleDataURI","limitBytes","root","result","validOptions","validateOptions","actual","possible","isNumber","list","checkImagesSizes","then","results","reportImagesWithSizeGreaterThan","checkList","map","getImageAndSize","Promise","all","listItem","url","response","bytesSize","data","length","catch","filter","resultItem","forEach","node","report","message"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,QAAQ,GAAG,sBAAU,iBAAV,CAAjB;;;AACA,IAAMC,QAAQ,GAAGC,iBAAMC,YAAN,CAAmBH,QAAnB,EAA6B;AACnDI,EAAAA,QAAQ,EAAE,kBAAAC,QAAQ;AAAA,WAAK,mBAAkBA,QAAS,sBAAhC;AAAA;AADiC,CAA7B,CAAjB;;;;AAIQ,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC9C,SAAO,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACvB,QAAMC,YAAY,GAAGR,iBAAMS,eAAN,CAAsBF,MAAtB,EAA8BT,QAA9B,EAAwC;AAC3DY,MAAAA,MAAM,EAAEL,UADmD;AAE3DM,MAAAA,QAAQ,EAAE,CAACC,gBAAD;AAFiD,KAAxC,CAArB;;AAKA,QAAI,CAACJ,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAMK,IAAI,GAAG,6CAAiCP,IAAjC,CAAb;AAEA,WAAOQ,gBAAgB,CAACD,IAAD,EAAON,MAAP,CAAhB,CAA+BQ,IAA/B,CAAoC,UAAAC,OAAO;AAAA,aAChDC,+BAA+B,CAACD,OAAD,EAAUT,MAAV,EAAkBF,UAAlB,CADiB;AAAA,KAA3C,CAAP;AAGD,GAfD;AAgBD;;AAED,SAASS,gBAAT,CAA0BD,IAA1B,EAAgC;AAC9B,MAAMK,SAAS,GAAGL,IAAI,CAACM,GAAL,CAASC,eAAT,CAAlB;AAEA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,SAAZ,CAAP;AACD;;AAED,SAASE,eAAT,CAAyBG,QAAzB,EAAmC;AACjC,SAAO,qBAASA,QAAQ,CAACC,GAAlB,EACJT,IADI,CACC,UAAAU,QAAQ;AAAA,6BACTF,QADS;AAEZG,MAAAA,SAAS,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAFb;AAAA,GADT,EAKJC,KALI,CAKE,YAAM,CAAE,CALV,CAAP;AAMD;;AAED,SAASZ,+BAAT,CAAyCD,OAAzC,EAAkDT,MAAlD,EAA0DF,UAA1D,EAAsE;AACpEW,EAAAA,OAAO,CAACc,MAAR,CAAe,UAAAC,UAAU;AAAA,WAAI,CAAC,CAACA,UAAN;AAAA,GAAzB,EAA2CC,OAA3C,CAAmD,gBAI7C;AAAA,QAHJC,IAGI,QAHJA,IAGI;AAAA,QAFJT,GAEI,QAFJA,GAEI;AAAA,QADJE,SACI,QADJA,SACI;;AACJ,QAAIA,SAAS,GAAGrB,UAAhB,EAA4B;AAC1BL,uBAAMkC,MAAN,CAAa;AAAEC,QAAAA,OAAO,EAAEpC,QAAQ,CAACG,QAAT,CAAkBsB,GAAlB,CAAX;AAAmCS,QAAAA,IAAnC;AAAyC1B,QAAAA,MAAzC;AAAiDT,QAAAA;AAAjD,OAAb;AACD;AACF,GARD;AASD","sourcesContent":["import { utils } from 'stylelint';\nimport { isNumber } from 'lodash';\nimport { namespace, generateListOfImagesURLsAndNodes, getImage } from '../../utils';\n\nexport const ruleName = namespace('prefer-data-uri');\nexport const messages = utils.ruleMessages(ruleName, {\n  expected: imageURL => `Expected image \"${imageURL}\" to be as data-URI.`\n});\n\nexport default function ruleDataURI(limitBytes) {\n  return (root, result) => {\n    const validOptions = utils.validateOptions(result, ruleName, {\n      actual: limitBytes,\n      possible: [isNumber]\n    });\n\n    if (!validOptions) {\n      return null;\n    }\n\n    const list = generateListOfImagesURLsAndNodes(root);\n\n    return checkImagesSizes(list, result).then(results =>\n      reportImagesWithSizeGreaterThan(results, result, limitBytes)\n    );\n  };\n}\n\nfunction checkImagesSizes(list) {\n  const checkList = list.map(getImageAndSize);\n\n  return Promise.all(checkList);\n}\n\nfunction getImageAndSize(listItem) {\n  return getImage(listItem.url)\n    .then(response => ({\n      ...listItem,\n      bytesSize: response.data.length\n    }))\n    .catch(() => {});\n}\n\nfunction reportImagesWithSizeGreaterThan(results, result, limitBytes) {\n  results.filter(resultItem => !!resultItem).forEach(({\n    node,\n    url,\n    bytesSize\n  }) => {\n    if (bytesSize < limitBytes) {\n      utils.report({ message: messages.expected(url), node, result, ruleName });\n    }\n  });\n}\n"],"file":"index.js"}