"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ruleDataURI;
exports.messages = exports.ruleName = void 0;

var _stylelint = require("stylelint");

var _lodash = require("lodash");

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ruleName = (0, _utils.namespace)('prefer-data-uri');
exports.ruleName = ruleName;

var messages = _stylelint.utils.ruleMessages(ruleName, {
  expected: function expected(imageURL) {
    return `Expected image "${imageURL}" to be as data-URI.`;
  }
});

exports.messages = messages;

function ruleDataURI(limitBytes) {
  return function (root, result) {
    var validOptions = _stylelint.utils.validateOptions(result, ruleName, {
      actual: limitBytes,
      possible: [_lodash.isNumber]
    });

    if (!validOptions) {
      return null;
    }

    var list = (0, _utils.generateListOfImagesURLsAndNodes)(root);
    return checkImagesSizes(list, result).then(function (results) {
      return reportImagesWithSizeGreaterThan(results, result, limitBytes);
    });
  };
}

function checkImagesSizes(list) {
  var checkList = list.map(getImageAndSize);
  return Promise.all(checkList);
}

function getImageAndSize(listItem) {
  return (0, _utils.getImage)(listItem.url).then(function (response) {
    return _objectSpread({}, listItem, {
      bytesSize: response.data.length
    });
  }).catch(function () {});
}

function reportImagesWithSizeGreaterThan(results, result, limitBytes) {
  results.filter(function (resultItem) {
    return !!resultItem;
  }).forEach(function (_ref) {
    var node = _ref.node,
        url = _ref.url,
        bytesSize = _ref.bytesSize;

    if (bytesSize < limitBytes) {
      _stylelint.utils.report({
        message: messages.expected(url),
        node,
        result,
        ruleName
      });
    }
  });
}
//# sourceMappingURL=index.js.map